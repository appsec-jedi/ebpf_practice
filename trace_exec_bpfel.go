// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadTrace_exec returns the embedded CollectionSpec for trace_exec.
func loadTrace_exec() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Trace_execBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load trace_exec: %w", err)
	}

	return spec, err
}

// loadTrace_execObjects loads trace_exec and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*trace_execObjects
//	*trace_execPrograms
//	*trace_execMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTrace_execObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTrace_exec()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// trace_execSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trace_execSpecs struct {
	trace_execProgramSpecs
	trace_execMapSpecs
	trace_execVariableSpecs
}

// trace_execProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trace_execProgramSpecs struct {
	HandleExecKprobe *ebpf.ProgramSpec `ebpf:"handle_exec_kprobe"`
}

// trace_execMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trace_execMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// trace_execVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type trace_execVariableSpecs struct {
}

// trace_execObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTrace_execObjects or ebpf.CollectionSpec.LoadAndAssign.
type trace_execObjects struct {
	trace_execPrograms
	trace_execMaps
	trace_execVariables
}

func (o *trace_execObjects) Close() error {
	return _Trace_execClose(
		&o.trace_execPrograms,
		&o.trace_execMaps,
	)
}

// trace_execMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTrace_execObjects or ebpf.CollectionSpec.LoadAndAssign.
type trace_execMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *trace_execMaps) Close() error {
	return _Trace_execClose(
		m.Events,
	)
}

// trace_execVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadTrace_execObjects or ebpf.CollectionSpec.LoadAndAssign.
type trace_execVariables struct {
}

// trace_execPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTrace_execObjects or ebpf.CollectionSpec.LoadAndAssign.
type trace_execPrograms struct {
	HandleExecKprobe *ebpf.Program `ebpf:"handle_exec_kprobe"`
}

func (p *trace_execPrograms) Close() error {
	return _Trace_execClose(
		p.HandleExecKprobe,
	)
}

func _Trace_execClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed trace_exec_bpfel.o
var _Trace_execBytes []byte
